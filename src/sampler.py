# This Python script runs on the machine that will control the VM enviroments.
# It acts as a server that signals the VMs to execute samples

import socket, time, threading
import utils.externalVMManager as externalVMManager
import utils.loggingUtil as loggingUtil
IP = '127.0.0.1'
PORT = 5000
BUFFER_SIZE = 2000
SAMPLE_SIGNAL = 'Sample:'
PASSIVE_SIGNAL = 'passive'

samplingComplete = False

externalVMManager.launchVM()
def sample(samplePath):
    externalVMManager.executeFile(samplePath)
    #TODO: Log stuff here, wait until logging is finished
    # loggingUtil.live_capture_for_packet_count(10)
    loggingUtil.async_packet_capture_for(60, True, True)
    # loggingUtil.export_packet_log(True)
    # while True: 
    #     if samplingComplete:
    #         disableLogging()
    #         externalVMManager.cycleVM()

def enableLogging():
    print("Logging Enabled")

def disableLogging():
    print("Logging Disabled")

clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
clientsocket.connect((IP, PORT))
# Probably change this to while VM ready to sample or something
while True:
    data = clientsocket.recv(BUFFER_SIZE)
    stringData = data.decode()
    parsedSignal = stringData[0:7]
    print("Parsed signal: %s" % (parsedSignal))
    if parsedSignal == SAMPLE_SIGNAL:
        parsedData = stringData[8:len(stringData)]
        print("Received Path: %s" % (parsedData))
        sample(stringData[8:len(stringData)])
    if parsedSignal == PASSIVE_SIGNAL:
        # Do not execute
        print("Bruh")
