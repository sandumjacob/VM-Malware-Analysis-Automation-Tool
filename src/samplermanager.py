import socket
from threading import Thread

class ClientThread(Thread):
    
    def __init__(self, ip):
        Thread.__init__(self)
        self.ip = ip
        self.port = PORT
        print("New thread started for " + ip)
    
    def run(self):
        print("Thread started")
        connection.send("Bruh".encode())

    def signalSampling(self):
        print("Signalling Sampling")
        # TODO: Replace this with a file that serves as the
        # data for the executable and also the signal
        connection.send("Sample".encode())


def sendFileTo(IP):
    print("Sending file")

IP = '127.0.0.1'
PORT = 5000
BUFFER_SIZE = 1024
MESSAGE = "Hello, World!"
CLIENT_COUNT = 1
machineIPs = [
    (1, '10.0.0.3'),
    (2, '10.0.0.4'),
    (3, '10.0.0.5'),
    (4, '10.0.0.6')]
serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
serversocket.bind((IP, PORT))
threads = []

# Wait for connections from the samplers
while len(threads)<CLIENT_COUNT:
    serversocket.listen(5)
    connection, (ip, port) = serversocket.accept()
    newthread = ClientThread(ip)
    newthread.start()
    threads.append(newthread)

for t in threads:
    t.join()

print(t)
# for x in range(500):
while True:
    threads[0].signalSampling()
serversocket.close()

# This function can be used to signal a certain malware analysis machine
# at labIP to locally execute a malware sample from a shared network 
# storage device.
def sampleAt(labIPs, samplePath):
    for ip in labIPs:
        print("Executing sampling at: "+ ip)