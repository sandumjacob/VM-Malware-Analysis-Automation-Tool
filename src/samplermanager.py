import socket
from threading import Thread

console_enabled = True

class ClientThread(Thread):
    
    def __init__(self, ip):
        Thread.__init__(self)
        self.ip = ip
        self.port = PORT
        print("New thread started for " + ip)
    
    def run(self):
        print("Thread started")

    # The argument origin dictates whether the sample
    # will be executed on this thread instance VM
    def signalSampling(self, path, origin):
        if origin:
            message = ""
            if origin:
                message = "Sample: %s" % (path)
                print("Signal Message: %s"% (message))
            else:
                message = "passive"
            print("Sending message: \n%s\n To IP address: %s" % (message, ip))
            connection.send(message.encode())
            connection.shutdown(0)
            print("Message Sent")

IP = '127.0.0.1'
PORT = 5000
BUFFER_SIZE = 1024
MESSAGE = "Hello, World!"
CLIENT_COUNT = 1
machineIPs = [
    (1, '10.0.0.3'),
    (2, '10.0.0.4'),
    (3, '10.0.0.5'),
    (4, '10.0.0.6')]
serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
serversocket.bind((IP, PORT))
threads = []

# Wait for connections from the samplers
while len(threads)<CLIENT_COUNT:
    serversocket.listen(5)
    connection, (ip, port) = serversocket.accept()
    newthread = ClientThread(ip)
    newthread.start()
    threads.append(newthread)

for t in threads:
    t.join()

print(t)

# This function is used to tell the network of VMs to execute
# a worm-type malware sample on an origin VM so that it can
# proliferate. A signal is sent to all the VMs, but only one
# is told to execute a sample. 
def sampleAtOrigin(originIP, samplePath):
    for thread in threads:
        if thread.ip == originIP:
            # Execute sample at origin infection point of originIP
            thread.signalSampling(samplePath, True)
        else:
            thread.signalSampling(samplePath, False)

# for x in range(500):
while console_enabled: 
    # C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe
    inputIP = input("Enter IP for sampling: ")
    inputPath = input("Enter Path of Executable: ")
    sampleAtOrigin(inputIP, inputPath)
    # threads[0].signalSampling(inputPath, True)
serversocket.close()