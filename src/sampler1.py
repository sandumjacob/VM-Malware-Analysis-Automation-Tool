import virtualbox, socket, externalVMManager

IP = '127.0.0.1'
PORT = 5000
BUFFER_SIZE = 2000
SAMPLE_SIGNAL = 'Sample'

VM_NAME = 'Windows'
VM_USERNAME = 'M'
VM_PASSWORD = 'computer'

vbox = virtualbox.VirtualBox()
session = virtualbox.Session()
machine = vbox.find_machine(VM_NAME)

progress = machine.launch_vm_process(session, "gui", "")
progress.wait_for_completion()
# Receives a request from the samplermanager to execute a sample
# locally in the Host's VM. This script should be looping on every 
# malware analysis machine
def sample(samplePath):
    
    print("Executing received sample")
    enableLogging()
    executeFileInVM("C:\\\\\\System32\\cmd.exe")
    session.unlock_machine()
    session.console.restoreSnapshot(machine.find_snapshot('Before Infected'))
    # Wait for execution, 60 seconds?
    
    # done, clean up
    resetVM()
    disableLogging()


def executeFileInVM(samplePath):
    print(session.state)
    # session.console.power_down()
    # machine.restore_snapshot(machine.current_snapshot)

    print("Executing")
    # session.console.keyboard.put_keys("M")
    # print("Guest Additions: ", session.console.guest.additions_run_level)
    
    while (session.console.guest.additions_run_level!=3):
        print("Wait")
    # input("Enter")
    print("Guest Additions: ", session.console.guest.additions_run_level)
    guest_session = session.console.guest.create_session(VM_USERNAME, VM_PASSWORD)
    # try: 
    #     flag = (guest_session.directory_exists("C:\\Windows")
    # except:
    #     print("Exception")
    # while guest_session.directory_exists("C:\\Windows") != True:
    #     print("Wait")
    # while (session.console.guest.additions_run_level!=3):
    #     print(session.console.guest.additions_run_level)
    #     print("wait")
    print(guest_session.directory_exists("C:\\Windows"))
    # proc, stdout, stderr = guest_session.execute(samplePath, ['\C', "tasklist"])
    # print(stdout)    

def enableLogging():
    print("Logging Enabled")


def disableLogging():
    print("Logging Disabled")


def resetVM(): 
    print("Resetting VM to uninfected state for new sample")
    # session.console.power_down()
    # session.console.restoreSnapshot(machine.currentSnapshot)

clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
clientsocket.connect((IP, PORT))
while True:
    data = clientsocket.recv(BUFFER_SIZE)
    # TODO: Replace this with a file that serves as both the 
    # executable data and the signal
    stringData = data.decode()
    if stringData[0:7] == SAMPLE_SIGNAL:
        print(stringData)
        sample(stringData[7:len(stringData)])
